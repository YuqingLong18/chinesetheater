generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://chinesetheater:W1H5ULol@localhost:5432/chinesetheater"
}

enum SenderType {
  student
  ai
}

enum ImageActionType {
  generation
  edit
}

enum SpacetimeAnalysisType {
  crossCulture
  sameEra
  sameGenre
  custom
}

enum WorkshopMode {
  relay
  adaptation
}

enum WorkshopStatus {
  active
  completed
  archived
}

enum WorkshopMemberRole {
  teacher
  student
}

enum WorkshopContributionStatus {
  accepted
  pending
  retracted
}

enum WorkshopChatType {
  message
  system
}

enum WorkshopVoteType {
  keep
  rewrite
}

enum WorkshopBoardType {
  plot
  imagery
  dialogue
  ending
  notes
  finalDraft
}

enum WorkshopSuggestionType {
  structure
  imagery
  diction
  pacing
  spirit
}

enum WorkshopReactionTargetType {
  contribution
  board
}

enum WorkshopReactionType {
  like
  upvote
}

enum SessionTaskFeature {
  chat
  writing
  workshop
  analysis
  journey
  gallery
}

enum SessionTaskSubmissionStatus {
  submitted
  resubmitted
}

model Teacher {
  teacherId    Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  sessions     Session[]
}

model Session {
  sessionId       Int              @id @default(autoincrement())
  teacher         Teacher          @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  teacherId       Int
  sessionName     String
  sessionPin      String           @unique
  authorName      String
  literatureTitle String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lifeJourney     Json?
  lifeJourneyGeneratedAt DateTime?
  students        Student[]
  conversations   Conversation[]
  images          GeneratedImage[]
  imageActivities ImageActivity[]
  imageReactions  ImageReaction[]
  imageComments   ImageComment[]
  tasks           SessionTask[]
  spacetimeAnalyses SpacetimeAnalysis[]
}


model Student {
  studentId      Int              @id @default(autoincrement())
  session        Session          @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId      Int
  username       String
  passwordHash   String
  initialPassword String?
  isUsed         Boolean          @default(false)
  firstLoginAt   DateTime?
  lastActivityAt DateTime?
  conversations  Conversation[]
  messages       Message[]
  images         GeneratedImage[]
  imageActivities ImageActivity[]
  imageReactions ImageReaction[]
  imageComments  ImageComment[]
  spacetimeAnalyses SpacetimeAnalysis[]
  taskSubmissions SessionTaskSubmission[]

  @@unique([sessionId, username])
}

model Conversation {
  conversationId Int       @id @default(autoincrement())
  student        Student   @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId      Int
  session        Session   @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId      Int
  messageCount   Int       @default(0)
  totalDuration  Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]

  @@unique([studentId, sessionId])
}

model Message {
  messageId      Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade)
  conversationId Int
  student        Student?     @relation(fields: [studentId], references: [studentId], onDelete: SetNull)
  studentId      Int?
  senderType     SenderType
  content        String
  timestamp      DateTime     @default(now())
}

model GeneratedImage {
  imageId          Int      @id @default(autoincrement())
  student          Student  @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId        Int
  session          Session  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId        Int
  style            String
  sceneDescription String
  imageUrl         String
  editCount        Int      @default(0)
  isShared         Boolean  @default(false)
  createdAt        DateTime @default(now())
  activities       ImageActivity[]
  reactions        ImageReaction[]
  comments         ImageComment[]
}

model ImageActivity {
  activityId  Int              @id @default(autoincrement())
  image       GeneratedImage   @relation(fields: [imageId], references: [imageId], onDelete: Cascade)
  imageId     Int
  student     Student          @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId   Int
  session     Session          @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId   Int
  actionType  ImageActionType
  instruction String
  createdAt   DateTime         @default(now())
}

model ImageReaction {
  reactionId Int      @id @default(autoincrement())
  image      GeneratedImage @relation(fields: [imageId], references: [imageId], onDelete: Cascade)
  imageId    Int
  student    Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId  Int
  session    Session @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId  Int
  createdAt  DateTime @default(now())

  @@unique([imageId, studentId])
  @@index([sessionId])
}

model ImageComment {
  commentId Int      @id @default(autoincrement())
  image     GeneratedImage @relation(fields: [imageId], references: [imageId], onDelete: Cascade)
  imageId   Int
  student   Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId Int
  session   Session @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId Int
  content   String
  createdAt DateTime @default(now())

  @@index([imageId])
  @@index([sessionId])
}

model SessionTask {
  taskId      Int                 @id @default(autoincrement())
  session     Session             @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId   Int
  title       String
  description String?
  feature     SessionTaskFeature
  config      Json?
  isRequired  Boolean             @default(true)
  orderIndex  Int                 @default(0)
  createdAt   DateTime            @default(now())
  submissions SessionTaskSubmission[]

  @@index([sessionId, orderIndex])
}

model SessionTaskSubmission {
  submissionId Int                         @id @default(autoincrement())
  task         SessionTask                 @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  taskId       Int
  student      Student                     @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId    Int
  status       SessionTaskSubmissionStatus @default(submitted)
  payload      Json
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt

  @@unique([taskId, studentId])
  @@index([studentId])
}

model SpacetimeAnalysis {
  analysisId      Int                     @id @default(autoincrement())
  student         Student                 @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId       Int
  session         Session                 @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  sessionId       Int
  author          String
  workTitle       String
  era             String
  genre           String
  analysisType    SpacetimeAnalysisType
  focusScope      String?
  promptNotes     String?
  customInstruction String?
  generatedContent String
  createdAt        DateTime                @default(now())
}

model WorkshopRoom {
  roomId             Int                   @id @default(autoincrement())
  code               String                @unique
  title              String
  mode               WorkshopMode
  theme              String?
  originalTitle      String?
  originalContent    String?
  meterRequirement   String?
  maxParticipants    Int
  targetLines        Int?
  status             WorkshopStatus        @default(active)
  currentTurnOrder   Int?
  timeLimitMinutes   Int?
  creatorTeacherId   Int?
  creatorStudentId   Int?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  members            WorkshopMember[]
  contributions      WorkshopContribution[]
  chats              WorkshopChatMessage[]
  boards             WorkshopBoard[]
  suggestions        WorkshopAiSuggestion[]
  reactions          WorkshopReaction[]
}

model WorkshopMember {
  memberId   Int                 @id @default(autoincrement())
  roomId     Int
  room       WorkshopRoom        @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  role       WorkshopMemberRole
  studentId  Int?
  teacherId  Int?
  nickname   String
  orderIndex Int
  isActive   Boolean             @default(true)
  joinedAt   DateTime            @default(now())
  contributions WorkshopContribution[]
  chats      WorkshopChatMessage[]
  votes      WorkshopContributionVote[]
  boardVersions WorkshopBoardVersion[]
  reactions WorkshopReaction[]

  @@index([roomId])
}

model WorkshopContribution {
  contributionId Int                         @id @default(autoincrement())
  roomId         Int
  room           WorkshopRoom                @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  memberId       Int
  member         WorkshopMember              @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  orderIndex     Int
  content        String
  aiFeedback     Json?
  status         WorkshopContributionStatus @default(accepted)
  createdAt      DateTime                   @default(now())
  votes          WorkshopContributionVote[]
  reactions      WorkshopReaction[] @relation("ContributionReactions")

  @@index([roomId])
  @@index([memberId])
}

model WorkshopChatMessage {
  messageId Int               @id @default(autoincrement())
  roomId    Int
  room      WorkshopRoom      @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  memberId  Int?
  member    WorkshopMember?   @relation(fields: [memberId], references: [memberId], onDelete: SetNull)
  messageType WorkshopChatType @default(message)
  content   String
  createdAt DateTime           @default(now())

  @@index([roomId])
}

model WorkshopContributionVote {
  voteId         Int                @id @default(autoincrement())
  contributionId Int
  contribution   WorkshopContribution @relation(fields: [contributionId], references: [contributionId], onDelete: Cascade)
  memberId       Int
  member         WorkshopMember     @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  voteType       WorkshopVoteType
  createdAt      DateTime           @default(now())

  @@unique([contributionId, memberId])
}

model WorkshopBoard {
  boardId    Int             @id @default(autoincrement())
  roomId     Int
  room       WorkshopRoom    @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  boardType  WorkshopBoardType
  title      String
  content    String
  updatedAt  DateTime        @updatedAt
  versions   WorkshopBoardVersion[]
  reactions  WorkshopReaction[] @relation("BoardReactions")
  suggestions WorkshopAiSuggestion[] @relation("BoardSuggestions")

  @@index([roomId])
  @@unique([roomId, boardType])
}

model WorkshopBoardVersion {
  versionId  Int             @id @default(autoincrement())
  boardId    Int
  board      WorkshopBoard   @relation(fields: [boardId], references: [boardId], onDelete: Cascade)
  memberId   Int?
  member     WorkshopMember? @relation(fields: [memberId], references: [memberId], onDelete: SetNull)
  summary    String?
  content    String
  createdAt  DateTime        @default(now())
}

model WorkshopAiSuggestion {
  suggestionId Int                     @id @default(autoincrement())
  roomId       Int
  room         WorkshopRoom            @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  boardId      Int?
  board        WorkshopBoard?          @relation("BoardSuggestions", fields: [boardId], references: [boardId], onDelete: SetNull)
  suggestionType WorkshopSuggestionType
  content       String
  createdAt     DateTime               @default(now())

  @@index([roomId])
  @@index([boardId])
}

model WorkshopReaction {
  reactionId  Int                        @id @default(autoincrement())
  roomId      Int
  room        WorkshopRoom               @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  memberId    Int
  member      WorkshopMember             @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  targetType  WorkshopReactionTargetType
  targetId    Int
  reactionType WorkshopReactionType
  createdAt   DateTime                   @default(now())
  contributionId Int?
  contribution   WorkshopContribution?   @relation("ContributionReactions", fields: [contributionId], references: [contributionId], onDelete: Cascade)
  boardId        Int?
  board          WorkshopBoard?          @relation("BoardReactions", fields: [boardId], references: [boardId], onDelete: Cascade)

  @@unique([roomId, memberId, targetType, targetId])
  @@index([roomId])
  @@index([targetType, targetId])
}
